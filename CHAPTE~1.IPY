{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UO7URN3HZCSa"
      },
      "source": [
        "## Linear Regression Reduction\n",
        "\n",
        "\n",
        "Import required packages"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lTck24rTZCSc"
      },
      "outputs": [],
      "source": [
        "%matplotlib inline\n",
        "from pathlib import Path\n",
        "\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression, Lasso, Ridge, LassoCV, BayesianRidge\n",
        "import statsmodels.formula.api as sm\n",
        "import matplotlib.pylab as plt\n",
        "import seaborn as sns\n",
        "\n",
        "!pip install dmba\n",
        "from dmba import regressionSummary, exhaustive_search\n",
        "from dmba import backward_elimination, forward_selection, stepwise_selection\n",
        "from dmba import adjusted_r2_score, AIC_score, BIC_score\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Read and Explore Data"
      ],
      "metadata": {
        "id": "P1e-Po2A_LYt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "car_df = pd.read_csv('ToyotaCorolla.csv')\n",
        "car_df.head(2) #2 of rows"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 340
        },
        "id": "-Ubq5nLElR9h",
        "outputId": "db201bad-a869-438e-8241-5fa1bb6df9d5"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Id                                          Model  Price  Age_08_04  \\\n",
              "0   1  TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors  13500         23   \n",
              "1   2  TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors  13750         23   \n",
              "\n",
              "   Mfg_Month  Mfg_Year     KM Fuel_Type  HP  Met_Color   Color  Automatic  \\\n",
              "0         10      2002  46986    Diesel  90          1    Blue          0   \n",
              "1         10      2002  72937    Diesel  90          1  Silver          0   \n",
              "\n",
              "     CC  Doors  Cylinders  Gears  Quarterly_Tax  Weight  Mfr_Guarantee  \\\n",
              "0  2000      3          4      5            210    1165              0   \n",
              "1  2000      3          4      5            210    1165              0   \n",
              "\n",
              "   BOVAG_Guarantee  Guarantee_Period  ABS  Airbag_1  Airbag_2  Airco  \\\n",
              "0                1                 3    1         1         1      0   \n",
              "1                1                 3    1         1         1      1   \n",
              "\n",
              "   Automatic_airco  Boardcomputer  CD_Player  Central_Lock  Powered_Windows  \\\n",
              "0                0              1          0             1                1   \n",
              "1                0              1          1             1                0   \n",
              "\n",
              "   Power_Steering  Radio  Mistlamps  Sport_Model  Backseat_Divider  \\\n",
              "0               1      0          0            0                 1   \n",
              "1               1      0          0            0                 1   \n",
              "\n",
              "   Metallic_Rim  Radio_cassette  Parking_Assistant  Tow_Bar  \n",
              "0             0               0                  0        0  \n",
              "1             0               0                  0        0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bc42d366-cc6f-4040-a514-80b2b28241b3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>Model</th>\n",
              "      <th>Price</th>\n",
              "      <th>Age_08_04</th>\n",
              "      <th>Mfg_Month</th>\n",
              "      <th>Mfg_Year</th>\n",
              "      <th>KM</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>HP</th>\n",
              "      <th>Met_Color</th>\n",
              "      <th>Color</th>\n",
              "      <th>Automatic</th>\n",
              "      <th>CC</th>\n",
              "      <th>Doors</th>\n",
              "      <th>Cylinders</th>\n",
              "      <th>Gears</th>\n",
              "      <th>Quarterly_Tax</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Mfr_Guarantee</th>\n",
              "      <th>BOVAG_Guarantee</th>\n",
              "      <th>Guarantee_Period</th>\n",
              "      <th>ABS</th>\n",
              "      <th>Airbag_1</th>\n",
              "      <th>Airbag_2</th>\n",
              "      <th>Airco</th>\n",
              "      <th>Automatic_airco</th>\n",
              "      <th>Boardcomputer</th>\n",
              "      <th>CD_Player</th>\n",
              "      <th>Central_Lock</th>\n",
              "      <th>Powered_Windows</th>\n",
              "      <th>Power_Steering</th>\n",
              "      <th>Radio</th>\n",
              "      <th>Mistlamps</th>\n",
              "      <th>Sport_Model</th>\n",
              "      <th>Backseat_Divider</th>\n",
              "      <th>Metallic_Rim</th>\n",
              "      <th>Radio_cassette</th>\n",
              "      <th>Parking_Assistant</th>\n",
              "      <th>Tow_Bar</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors</td>\n",
              "      <td>13500</td>\n",
              "      <td>23</td>\n",
              "      <td>10</td>\n",
              "      <td>2002</td>\n",
              "      <td>46986</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>Blue</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>210</td>\n",
              "      <td>1165</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors</td>\n",
              "      <td>13750</td>\n",
              "      <td>23</td>\n",
              "      <td>10</td>\n",
              "      <td>2002</td>\n",
              "      <td>72937</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>Silver</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>210</td>\n",
              "      <td>1165</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bc42d366-cc6f-4040-a514-80b2b28241b3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bc42d366-cc6f-4040-a514-80b2b28241b3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bc42d366-cc6f-4040-a514-80b2b28241b3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f3177da0-2dd4-4bee-8f58-a0ec6d627d10\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f3177da0-2dd4-4bee-8f58-a0ec6d627d10')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f3177da0-2dd4-4bee-8f58-a0ec6d627d10 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.set_option('display.max_columns', None) #to see all columns"
      ],
      "metadata": {
        "id": "kA7Wg4ZRlcUN"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "car_df.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 340
        },
        "id": "icmLbEfHljaU",
        "outputId": "31209df1-ae1e-4cda-b91f-e434835dbce5"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Id                                          Model  Price  Age_08_04  \\\n",
              "0   1  TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors  13500         23   \n",
              "1   2  TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors  13750         23   \n",
              "\n",
              "   Mfg_Month  Mfg_Year     KM Fuel_Type  HP  Met_Color   Color  Automatic  \\\n",
              "0         10      2002  46986    Diesel  90          1    Blue          0   \n",
              "1         10      2002  72937    Diesel  90          1  Silver          0   \n",
              "\n",
              "     CC  Doors  Cylinders  Gears  Quarterly_Tax  Weight  Mfr_Guarantee  \\\n",
              "0  2000      3          4      5            210    1165              0   \n",
              "1  2000      3          4      5            210    1165              0   \n",
              "\n",
              "   BOVAG_Guarantee  Guarantee_Period  ABS  Airbag_1  Airbag_2  Airco  \\\n",
              "0                1                 3    1         1         1      0   \n",
              "1                1                 3    1         1         1      1   \n",
              "\n",
              "   Automatic_airco  Boardcomputer  CD_Player  Central_Lock  Powered_Windows  \\\n",
              "0                0              1          0             1                1   \n",
              "1                0              1          1             1                0   \n",
              "\n",
              "   Power_Steering  Radio  Mistlamps  Sport_Model  Backseat_Divider  \\\n",
              "0               1      0          0            0                 1   \n",
              "1               1      0          0            0                 1   \n",
              "\n",
              "   Metallic_Rim  Radio_cassette  Parking_Assistant  Tow_Bar  \n",
              "0             0               0                  0        0  \n",
              "1             0               0                  0        0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-830e6899-fa96-4e2f-bf60-3d8893173387\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>Model</th>\n",
              "      <th>Price</th>\n",
              "      <th>Age_08_04</th>\n",
              "      <th>Mfg_Month</th>\n",
              "      <th>Mfg_Year</th>\n",
              "      <th>KM</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>HP</th>\n",
              "      <th>Met_Color</th>\n",
              "      <th>Color</th>\n",
              "      <th>Automatic</th>\n",
              "      <th>CC</th>\n",
              "      <th>Doors</th>\n",
              "      <th>Cylinders</th>\n",
              "      <th>Gears</th>\n",
              "      <th>Quarterly_Tax</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Mfr_Guarantee</th>\n",
              "      <th>BOVAG_Guarantee</th>\n",
              "      <th>Guarantee_Period</th>\n",
              "      <th>ABS</th>\n",
              "      <th>Airbag_1</th>\n",
              "      <th>Airbag_2</th>\n",
              "      <th>Airco</th>\n",
              "      <th>Automatic_airco</th>\n",
              "      <th>Boardcomputer</th>\n",
              "      <th>CD_Player</th>\n",
              "      <th>Central_Lock</th>\n",
              "      <th>Powered_Windows</th>\n",
              "      <th>Power_Steering</th>\n",
              "      <th>Radio</th>\n",
              "      <th>Mistlamps</th>\n",
              "      <th>Sport_Model</th>\n",
              "      <th>Backseat_Divider</th>\n",
              "      <th>Metallic_Rim</th>\n",
              "      <th>Radio_cassette</th>\n",
              "      <th>Parking_Assistant</th>\n",
              "      <th>Tow_Bar</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors</td>\n",
              "      <td>13500</td>\n",
              "      <td>23</td>\n",
              "      <td>10</td>\n",
              "      <td>2002</td>\n",
              "      <td>46986</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>Blue</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>210</td>\n",
              "      <td>1165</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors</td>\n",
              "      <td>13750</td>\n",
              "      <td>23</td>\n",
              "      <td>10</td>\n",
              "      <td>2002</td>\n",
              "      <td>72937</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>Silver</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>210</td>\n",
              "      <td>1165</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-830e6899-fa96-4e2f-bf60-3d8893173387')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-830e6899-fa96-4e2f-bf60-3d8893173387 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-830e6899-fa96-4e2f-bf60-3d8893173387');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d83cefae-f922-400f-9e6c-b7fc8a28846f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d83cefae-f922-400f-9e6c-b7fc8a28846f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d83cefae-f922-400f-9e6c-b7fc8a28846f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Code provided to save typing:\n",
        "#cylinders\n",
        "car_df[[\"Price\", \"Age_08_04\", \"Mfg_Year\", \"Mfg_Month\", \"KM\", \"CC\", \"Doors\", \"Cylinders\",\n",
        "        \"Gears\", \"Quarterly_Tax\", \"Weight\", \"Guarantee_Period\"]].corr()"
      ],
      "metadata": {
        "id": "pL8O32swtnbr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "car_df['Cylinders'].unique() #distinct values in the column"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GiRXstAwl4xP",
        "outputId": "58dab306-83c5-4a82-99b7-639e7d1e7ab0"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([4])"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "car_df['Cylinders'].nunique() #distinct values in the column"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kIwTO2eYmRMO",
        "outputId": "18bf4b3d-d477-4d8e-c7c3-0fc0ba893182"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "car_df.nunique() # number of unique values for each col"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "poFO5cxSmbp3",
        "outputId": "82ff72a5-82b3-4d89-fa47-f806acb5a0e5"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Id                   1436\n",
              "Model                 319\n",
              "Price                 236\n",
              "Age_08_04              77\n",
              "Mfg_Month              12\n",
              "Mfg_Year                7\n",
              "KM                   1263\n",
              "Fuel_Type               3\n",
              "HP                     12\n",
              "Met_Color               2\n",
              "Color                  10\n",
              "Automatic               2\n",
              "CC                     13\n",
              "Doors                   4\n",
              "Cylinders               1\n",
              "Gears                   4\n",
              "Quarterly_Tax          13\n",
              "Weight                 59\n",
              "Mfr_Guarantee           2\n",
              "BOVAG_Guarantee         2\n",
              "Guarantee_Period        9\n",
              "ABS                     2\n",
              "Airbag_1                2\n",
              "Airbag_2                2\n",
              "Airco                   2\n",
              "Automatic_airco         2\n",
              "Boardcomputer           2\n",
              "CD_Player               2\n",
              "Central_Lock            2\n",
              "Powered_Windows         2\n",
              "Power_Steering          2\n",
              "Radio                   2\n",
              "Mistlamps               2\n",
              "Sport_Model             2\n",
              "Backseat_Divider        2\n",
              "Metallic_Rim            2\n",
              "Radio_cassette          2\n",
              "Parking_Assistant       2\n",
              "Tow_Bar                 2\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corr = car_df[[\"Price\", \"Age_08_04\", \"Mfg_Year\", \"Mfg_Month\", \"KM\", \"CC\", \"Doors\",\n",
        "        \"Gears\", \"Quarterly_Tax\", \"Weight\", \"Guarantee_Period\"]].corr()\n",
        "        #remove cylinder"
      ],
      "metadata": {
        "id": "HWBeUKc0o5GQ"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(corr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 562
        },
        "id": "rCLbiDxJpBgv",
        "outputId": "164d20dd-1fd4-405d-ad6c-2fa4ace2c3af"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(corr, annot=True, fmt='.2f', cmap='RdYlGn') #fmt number of, cmpa (color)\n",
        "#highly correlated could be .9 and remove them; we remove price (this is the y), and age (vs year) as it is least impt; .7 is cutoff"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 562
        },
        "id": "H0_W6vjPpIDD",
        "outputId": "71287b1d-a40f-4149-d181-3e0dc914af32"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pnQ54K1cZCSd"
      },
      "source": [
        "## Fully Specified Regression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "scrolled": false,
        "id": "i8u3RUJzZCSd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "44c39ea4-7c9b-43f6-96fb-f5adcc704f8b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "intercept  4772.390320739427\n",
            "            Predictor  coefficient\n",
            "0           Age_08_04  -112.546260\n",
            "1                  KM    -0.017317\n",
            "2                  HP    61.977366\n",
            "3           Met_Color  -140.935678\n",
            "4           Automatic   602.339811\n",
            "5                  CC    -4.462543\n",
            "6               Doors   169.721511\n",
            "7               Gears    74.450541\n",
            "8       Quarterly_Tax    14.407715\n",
            "9              Weight     7.733820\n",
            "10      Mfr_Guarantee   212.134793\n",
            "11    BOVAG_Guarantee   364.140508\n",
            "12   Guarantee_Period    67.249469\n",
            "13                ABS   -86.377000\n",
            "14           Airbag_1   313.674734\n",
            "15           Airbag_2  -195.469715\n",
            "16              Airco   149.499407\n",
            "17    Automatic_airco  2411.422498\n",
            "18      Boardcomputer  -301.801680\n",
            "19          CD_Player   367.056893\n",
            "20       Central_Lock   310.413117\n",
            "21    Powered_Windows   117.299995\n",
            "22     Power_Steering  -233.988836\n",
            "23              Radio   331.269107\n",
            "24          Mistlamps    17.081262\n",
            "25        Sport_Model   384.883695\n",
            "26   Backseat_Divider   -97.950464\n",
            "27       Metallic_Rim   238.278003\n",
            "28     Radio_cassette  -361.972953\n",
            "29  Parking_Assistant  -512.630237\n",
            "30            Tow_Bar   -72.026967\n",
            "31   Fuel_Type_Diesel  4255.707989\n",
            "32   Fuel_Type_Petrol  2071.988203\n",
            "33        Color_Black   411.342193\n",
            "34         Color_Blue   215.267312\n",
            "35        Color_Green    38.329867\n",
            "36         Color_Grey   365.047174\n",
            "37          Color_Red    72.024516\n",
            "38       Color_Silver   448.869258\n",
            "39       Color_Violet   357.311260\n",
            "40        Color_White    26.001369\n",
            "41       Color_Yellow   769.678912\n",
            "\n",
            "Regression statistics\n",
            "\n",
            "                      Mean Error (ME) : 0.0000\n",
            "       Root Mean Squared Error (RMSE) : 1123.2694\n",
            "            Mean Absolute Error (MAE) : 824.9464\n",
            "          Mean Percentage Error (MPE) : -0.9105\n",
            "Mean Absolute Percentage Error (MAPE) : 8.1877\n"
          ]
        }
      ],
      "source": [
        "excluded_columns = (\"Price\", \"Id\", \"Mfg_Month\", \"Mfg_Year\", \"Model\", \"Cylinders\")\n",
        "predictors = [s for s in car_df.columns if s not in excluded_columns]\n",
        "\n",
        "outcome = 'Price'\n",
        "\n",
        "# partition data\n",
        "X = pd.get_dummies(car_df[predictors], drop_first=True)\n",
        "y = car_df[outcome]\n",
        "train_X, valid_X, train_y, valid_y = train_test_split(X, y, test_size=0.4, random_state=1)\n",
        "\n",
        "car_lm = LinearRegression()\n",
        "car_lm.fit(train_X, train_y)\n",
        "\n",
        "# print coefficients\n",
        "print('intercept ', car_lm.intercept_)\n",
        "print(pd.DataFrame({'Predictor': X.columns, 'coefficient': car_lm.coef_}))\n",
        "\n",
        "# print performance measures\n",
        "regressionSummary(train_y, car_lm.predict(train_X))\n",
        "\n",
        "#if mean error is 0, then we use the train"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "excluded_columns = (\"Price\", \"Id\", \"Mfg_Month\", \"Mfg_Year\", \"Model\", \"Cylinders\")\n",
        "predictors = [s for s in car_df.columns if s not in excluded_columns]\n",
        "\n",
        "outcome = 'Price'\n",
        "\n",
        "# partition data\n",
        "X = pd.get_dummies(car_df[predictors], drop_first=True)\n",
        "y = car_df[outcome]\n",
        "train_X, valid_X, train_y, valid_y = train_test_split(X, y, test_size=0.4, random_state=1)\n",
        "\n",
        "car_lm = LinearRegression()\n",
        "car_lm.fit(train_X, train_y)\n",
        "\n",
        "# print coefficients\n",
        "print('intercept ', car_lm.intercept_)\n",
        "print(pd.DataFrame({'Predictor': X.columns, 'coefficient': car_lm.coef_}))\n",
        "\n",
        "# print performance measures\n",
        "regressionSummary(train_y, car_lm.predict(train_X))\n",
        "#this time we include the valid\n",
        "regressionSummary(valid_y, car_lm.predict(valid_X))\n",
        "\n",
        "#results show that model is slightly overfit bec the MAE is quite diff from each other\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CQ7QjuDatTQn",
        "outputId": "f8a6f9b8-0e33-455a-a9f6-5808f4f7ff28"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "intercept  4772.390320739427\n",
            "            Predictor  coefficient\n",
            "0           Age_08_04  -112.546260\n",
            "1                  KM    -0.017317\n",
            "2                  HP    61.977366\n",
            "3           Met_Color  -140.935678\n",
            "4           Automatic   602.339811\n",
            "5                  CC    -4.462543\n",
            "6               Doors   169.721511\n",
            "7               Gears    74.450541\n",
            "8       Quarterly_Tax    14.407715\n",
            "9              Weight     7.733820\n",
            "10      Mfr_Guarantee   212.134793\n",
            "11    BOVAG_Guarantee   364.140508\n",
            "12   Guarantee_Period    67.249469\n",
            "13                ABS   -86.377000\n",
            "14           Airbag_1   313.674734\n",
            "15           Airbag_2  -195.469715\n",
            "16              Airco   149.499407\n",
            "17    Automatic_airco  2411.422498\n",
            "18      Boardcomputer  -301.801680\n",
            "19          CD_Player   367.056893\n",
            "20       Central_Lock   310.413117\n",
            "21    Powered_Windows   117.299995\n",
            "22     Power_Steering  -233.988836\n",
            "23              Radio   331.269107\n",
            "24          Mistlamps    17.081262\n",
            "25        Sport_Model   384.883695\n",
            "26   Backseat_Divider   -97.950464\n",
            "27       Metallic_Rim   238.278003\n",
            "28     Radio_cassette  -361.972953\n",
            "29  Parking_Assistant  -512.630237\n",
            "30            Tow_Bar   -72.026967\n",
            "31   Fuel_Type_Diesel  4255.707989\n",
            "32   Fuel_Type_Petrol  2071.988203\n",
            "33        Color_Black   411.342193\n",
            "34         Color_Blue   215.267312\n",
            "35        Color_Green    38.329867\n",
            "36         Color_Grey   365.047174\n",
            "37          Color_Red    72.024516\n",
            "38       Color_Silver   448.869258\n",
            "39       Color_Violet   357.311260\n",
            "40        Color_White    26.001369\n",
            "41       Color_Yellow   769.678912\n",
            "\n",
            "Regression statistics\n",
            "\n",
            "                      Mean Error (ME) : 0.0000\n",
            "       Root Mean Squared Error (RMSE) : 1123.2694\n",
            "            Mean Absolute Error (MAE) : 824.9464\n",
            "          Mean Percentage Error (MPE) : -0.9105\n",
            "Mean Absolute Percentage Error (MAPE) : 8.1877\n",
            "\n",
            "Regression statistics\n",
            "\n",
            "                      Mean Error (ME) : 181.1141\n",
            "       Root Mean Squared Error (RMSE) : 2897.8006\n",
            "            Mean Absolute Error (MAE) : 981.0412\n",
            "          Mean Percentage Error (MPE) : 0.4879\n",
            "Mean Absolute Percentage Error (MAPE) : 9.4471\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "4BPPCYtZZCSe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "73b76a32-8cab-471e-d13e-f60f3cd786cc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "adjusted r2 :  0.9034366497700592\n",
            "AIC :  14626.738143217437\n",
            "BIC :  14836.094301412257\n"
          ]
        }
      ],
      "source": [
        "pred_y = car_lm.predict(train_X)\n",
        "\n",
        "print('adjusted r2 : ', adjusted_r2_score(train_y, pred_y, car_lm))\n",
        "print('AIC : ', AIC_score(train_y, pred_y, car_lm))\n",
        "print('BIC : ', BIC_score(train_y, pred_y, car_lm))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P6qAEw3VZCSf"
      },
      "source": [
        "## Validation Statistics"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "-4y82H3FZCSf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4b03f95f-4ebc-4326-df70-b0813ae3dcbf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "         Predicted  Actual     Residual\n",
            "509   12339.934354   10900 -1439.934354\n",
            "435   10182.486535   10895   712.513465\n",
            "321   13512.010445   10750 -2762.010445\n",
            "1055   6483.619966    6500    16.380034\n",
            "288   12769.565487   11895  -874.565487\n",
            "48    17614.945090   17950   335.054910\n",
            "1403   7936.499661    7000  -936.499661\n",
            "952    9029.968276    8400  -629.968276\n",
            "1097   7460.763021    7250  -210.763021\n",
            "204   11651.785801   12950  1298.214199\n",
            "978    9134.005945    8745  -389.005945\n",
            "404    9707.106898    9450  -257.106898\n",
            "1338   7126.008141    7499   372.991859\n",
            "754    8561.298554    9950  1388.701446\n",
            "1189   7396.320110    8500  1103.679890\n",
            "948    7501.222764    7750   248.777236\n",
            "1079   6331.754087    8950  2618.245913\n",
            "1108   7579.482222    8250   670.517778\n",
            "107   16864.818050   17450   585.181950\n",
            "1065   6153.742091    6550   396.257909\n",
            "\n",
            "Regression statistics\n",
            "\n",
            "                      Mean Error (ME) : 181.1141\n",
            "       Root Mean Squared Error (RMSE) : 2897.8006\n",
            "            Mean Absolute Error (MAE) : 981.0412\n",
            "          Mean Percentage Error (MPE) : 0.4879\n",
            "Mean Absolute Percentage Error (MAPE) : 9.4471\n"
          ]
        }
      ],
      "source": [
        "# Use predict() to make predictions on a new set\n",
        "car_lm_pred = car_lm.predict(valid_X)\n",
        "\n",
        "result = pd.DataFrame({'Predicted': car_lm_pred, 'Actual': valid_y,\n",
        "                       'Residual': valid_y - car_lm_pred})\n",
        "print(result.head(20))\n",
        "\n",
        "# Compute common accuracy measures\n",
        "regressionSummary(valid_y, car_lm_pred)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u1hkRS6LZCSh"
      },
      "source": [
        "## Backward Elimination"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "JiJPCh7JZCSh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0f3cd54a-5513-4a40-ca9f-fb252d9336b7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Variables: Age_08_04, KM, HP, Met_Color, Automatic, CC, Doors, Gears, Quarterly_Tax, Weight, Mfr_Guarantee, BOVAG_Guarantee, Guarantee_Period, ABS, Airbag_1, Airbag_2, Airco, Automatic_airco, Boardcomputer, CD_Player, Central_Lock, Powered_Windows, Power_Steering, Radio, Mistlamps, Sport_Model, Backseat_Divider, Metallic_Rim, Radio_cassette, Parking_Assistant, Tow_Bar, Fuel_Type_Diesel, Fuel_Type_Petrol, Color_Black, Color_Blue, Color_Green, Color_Grey, Color_Red, Color_Silver, Color_Violet, Color_White, Color_Yellow\n",
            "Start: score=14626.74\n",
            "Step: score=14624.74, remove Color_White\n",
            "Step: score=14622.74, remove Color_Green\n",
            "Step: score=14620.76, remove Mistlamps\n",
            "Step: score=14618.83, remove Color_Red\n",
            "Step: score=14616.92, remove Radio\n",
            "Step: score=14615.00, remove Radio_cassette\n",
            "Step: score=14613.11, remove Gears\n",
            "Step: score=14611.25, remove Color_Violet\n",
            "Step: score=14609.53, remove ABS\n",
            "Step: score=14607.88, remove Backseat_Divider\n",
            "Step: score=14606.27, remove Color_Yellow\n",
            "Step: score=14604.71, remove Parking_Assistant\n",
            "Step: score=14603.18, remove Powered_Windows\n",
            "Step: score=14601.75, remove Power_Steering\n",
            "Step: score=14600.04, remove Airbag_1\n",
            "Step: score=14598.53, remove Tow_Bar\n",
            "Step: score=14598.53, remove None\n",
            "['Age_08_04', 'KM', 'HP', 'Met_Color', 'Automatic', 'CC', 'Doors', 'Quarterly_Tax', 'Weight', 'Mfr_Guarantee', 'BOVAG_Guarantee', 'Guarantee_Period', 'Airbag_2', 'Airco', 'Automatic_airco', 'Boardcomputer', 'CD_Player', 'Central_Lock', 'Sport_Model', 'Metallic_Rim', 'Fuel_Type_Diesel', 'Fuel_Type_Petrol', 'Color_Black', 'Color_Blue', 'Color_Grey', 'Color_Silver']\n"
          ]
        }
      ],
      "source": [
        "#green arrow\n",
        "def train_model(variables):\n",
        "    model = LinearRegression()\n",
        "    model.fit(train_X[variables], train_y)\n",
        "    return model\n",
        "\n",
        "def score_model(model, variables):\n",
        "    return AIC_score(train_y, model.predict(train_X[variables]), model)\n",
        "\n",
        "best_back_model, best_back_variables = backward_elimination(train_X.columns, train_model, score_model, verbose=True)\n",
        "\n",
        "print(best_back_variables)\n",
        "#the score values are the AIC values, as AIC decreases when we remove variables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "id": "QNQTuKC6ZCSi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "311bc3cb-c87c-4ab9-f75b-4b42ec93f5db"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Regression statistics\n",
            "\n",
            "                      Mean Error (ME) : 182.4184\n",
            "       Root Mean Squared Error (RMSE) : 2972.7442\n",
            "            Mean Absolute Error (MAE) : 988.2640\n",
            "          Mean Percentage Error (MPE) : 0.4715\n",
            "Mean Absolute Percentage Error (MAPE) : 9.5146\n"
          ]
        }
      ],
      "source": [
        "regressionSummary(valid_y, best_back_model.predict(valid_X[best_back_variables]))\n",
        "#RMSE 2972.74 and MAE 988 vs previous full reg MAE 981 (bec it is lower); we choose the full reg since it has a lower error"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IigezmXnZCSi"
      },
      "source": [
        "## Forward Selection"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "id": "0G2Ldc_BZCSi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "884b402f-b17e-4e07-c4d6-80fb61030637"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Variables: Age_08_04, KM, HP, Met_Color, Automatic, CC, Doors, Gears, Quarterly_Tax, Weight, Mfr_Guarantee, BOVAG_Guarantee, Guarantee_Period, ABS, Airbag_1, Airbag_2, Airco, Automatic_airco, Boardcomputer, CD_Player, Central_Lock, Powered_Windows, Power_Steering, Radio, Mistlamps, Sport_Model, Backseat_Divider, Metallic_Rim, Radio_cassette, Parking_Assistant, Tow_Bar, Fuel_Type_Diesel, Fuel_Type_Petrol, Color_Black, Color_Blue, Color_Green, Color_Grey, Color_Red, Color_Silver, Color_Violet, Color_White, Color_Yellow\n",
            "Start: score=16598.48, constant\n",
            "Step: score=15340.94, add Age_08_04\n",
            "Step: score=15106.55, add Automatic_airco\n",
            "Step: score=15004.56, add HP\n",
            "Step: score=14908.35, add Weight\n",
            "Step: score=14773.13, add KM\n",
            "Step: score=14748.81, add Central_Lock\n",
            "Step: score=14728.55, add Quarterly_Tax\n",
            "Step: score=14701.22, add CC\n",
            "Step: score=14687.54, add Fuel_Type_Diesel\n",
            "Step: score=14668.95, add Fuel_Type_Petrol\n",
            "Step: score=14651.66, add Guarantee_Period\n",
            "Step: score=14641.90, add Sport_Model\n",
            "Step: score=14635.43, add BOVAG_Guarantee\n",
            "Step: score=14629.57, add CD_Player\n",
            "Step: score=14624.14, add Boardcomputer\n",
            "Step: score=14619.28, add Doors\n",
            "Step: score=14612.86, add Automatic\n",
            "Step: score=14608.58, add Metallic_Rim\n",
            "Step: score=14606.44, add Color_Green\n",
            "Step: score=14603.48, add Color_Red\n",
            "Step: score=14601.07, add Mfr_Guarantee\n",
            "Step: score=14599.36, add Airbag_2\n",
            "Step: score=14598.88, add Airco\n",
            "Step: score=14598.55, add Color_Blue\n",
            "Step: score=14598.49, add Met_Color\n",
            "Step: score=14598.49, add None\n",
            "['Age_08_04', 'Automatic_airco', 'HP', 'Weight', 'KM', 'Central_Lock', 'Quarterly_Tax', 'CC', 'Fuel_Type_Diesel', 'Fuel_Type_Petrol', 'Guarantee_Period', 'Sport_Model', 'BOVAG_Guarantee', 'CD_Player', 'Boardcomputer', 'Doors', 'Automatic', 'Metallic_Rim', 'Color_Green', 'Color_Red', 'Mfr_Guarantee', 'Airbag_2', 'Airco', 'Color_Blue', 'Met_Color']\n"
          ]
        }
      ],
      "source": [
        "# The initial model is the constant model - this requires special handling\n",
        "# in train_model and score_model\n",
        "def train_model(variables):\n",
        "    if len(variables) == 0:\n",
        "        return None\n",
        "    model = LinearRegression()\n",
        "    model.fit(train_X[variables], train_y)\n",
        "    return model\n",
        "\n",
        "def score_model(model, variables):\n",
        "    if len(variables) == 0:\n",
        "        return AIC_score(train_y, [train_y.mean()] * len(train_y), model, df=1)\n",
        "    return AIC_score(train_y, model.predict(train_X[variables]), model)\n",
        "\n",
        "best_forw_model, best_forw_variables = forward_selection(train_X.columns, train_model, score_model, verbose=True)\n",
        "\n",
        "print(best_forw_variables)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "regressionSummary(valid_y, best_forw_model.predict(valid_X[best_forw_variables]))\n",
        "#MAE here is higher than full and backward which means that full is still better"
      ],
      "metadata": {
        "id": "dHj8ODZIm413",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fea975d2-5ee2-4d08-b763-0076e2560271"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Regression statistics\n",
            "\n",
            "                      Mean Error (ME) : 179.1195\n",
            "       Root Mean Squared Error (RMSE) : 2964.1945\n",
            "            Mean Absolute Error (MAE) : 991.6956\n",
            "          Mean Percentage Error (MPE) : 0.4227\n",
            "Mean Absolute Percentage Error (MAPE) : 9.5754\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Stepwise Selection\n",
        "Note: You must run Forward Selection above to create the **train_model**"
      ],
      "metadata": {
        "id": "agvSFvHb03J5"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "id": "Y8oaIjLFZCSi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6897bc47-ab46-4ea4-91f5-8190c1e4d707"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Variables: Age_08_04, KM, HP, Met_Color, Automatic, CC, Doors, Gears, Quarterly_Tax, Weight, Mfr_Guarantee, BOVAG_Guarantee, Guarantee_Period, ABS, Airbag_1, Airbag_2, Airco, Automatic_airco, Boardcomputer, CD_Player, Central_Lock, Powered_Windows, Power_Steering, Radio, Mistlamps, Sport_Model, Backseat_Divider, Metallic_Rim, Radio_cassette, Parking_Assistant, Tow_Bar, Fuel_Type_Diesel, Fuel_Type_Petrol, Color_Black, Color_Blue, Color_Green, Color_Grey, Color_Red, Color_Silver, Color_Violet, Color_White, Color_Yellow\n",
            "Start: score=16598.48, constant\n",
            "Step: score=15340.94, add Age_08_04\n",
            "Step: score=15106.55, add Automatic_airco\n",
            "Step: score=15004.56, add HP\n",
            "Step: score=14908.35, add Weight\n",
            "Step: score=14773.13, add KM\n",
            "Step: score=14748.81, add Central_Lock\n",
            "Step: score=14728.55, add Quarterly_Tax\n",
            "Step: score=14701.22, add CC\n",
            "Step: score=14687.54, add Fuel_Type_Diesel\n",
            "Step: score=14668.95, add Fuel_Type_Petrol\n",
            "Step: score=14651.66, add Guarantee_Period\n",
            "Step: score=14641.90, add Sport_Model\n",
            "Step: score=14635.43, add BOVAG_Guarantee\n",
            "Step: score=14629.57, add CD_Player\n",
            "Step: score=14624.14, add Boardcomputer\n",
            "Step: score=14619.28, add Doors\n",
            "Step: score=14612.86, add Automatic\n",
            "Step: score=14608.58, add Metallic_Rim\n",
            "Step: score=14606.44, add Color_Green\n",
            "Step: score=14603.48, add Color_Red\n",
            "Step: score=14601.07, add Mfr_Guarantee\n",
            "Step: score=14599.36, add Airbag_2\n",
            "Step: score=14598.88, add Airco\n",
            "Step: score=14598.55, add Color_Blue\n",
            "Step: score=14598.49, add Met_Color\n",
            "Step: score=14598.49, unchanged None\n",
            "['Age_08_04', 'Automatic_airco', 'HP', 'Weight', 'KM', 'Central_Lock', 'Quarterly_Tax', 'CC', 'Fuel_Type_Diesel', 'Fuel_Type_Petrol', 'Guarantee_Period', 'Sport_Model', 'BOVAG_Guarantee', 'CD_Player', 'Boardcomputer', 'Doors', 'Automatic', 'Metallic_Rim', 'Color_Green', 'Color_Red', 'Mfr_Guarantee', 'Airbag_2', 'Airco', 'Color_Blue', 'Met_Color']\n"
          ]
        }
      ],
      "source": [
        "best_step_model, best_step_variables = stepwise_selection(train_X.columns, train_model, score_model, verbose=True)\n",
        "\n",
        "print(best_step_variables)\n",
        "#nothing was removed"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "regressionSummary(valid_y, best_step_model.predict(valid_X[best_step_variables]))\n",
        "#results are same as forward since it did the same thing"
      ],
      "metadata": {
        "id": "kOxztEHbm-po",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e18037c9-d089-4d7b-9a7b-ce2504fe2f70"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Regression statistics\n",
            "\n",
            "                      Mean Error (ME) : 179.1195\n",
            "       Root Mean Squared Error (RMSE) : 2964.1945\n",
            "            Mean Absolute Error (MAE) : 991.6956\n",
            "          Mean Percentage Error (MPE) : 0.4227\n",
            "Mean Absolute Percentage Error (MAPE) : 9.5754\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Score a Model\n",
        "Fit a model to new data"
      ],
      "metadata": {
        "id": "crc0kBjE16be"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "predictors2 = ['Age_08_04', 'KM', 'Fuel_Type', 'Doors']\n",
        "outcome2 = 'Price'\n",
        "\n",
        "# partition data\n",
        "X2 = pd.get_dummies(car_df[predictors2], drop_first=True)\n",
        "y2 = car_df[outcome2]\n",
        "train_X2, valid_X2, train_y2, valid_y2 = train_test_split(X2, y2, test_size=0.4, random_state=1)\n",
        "\n",
        "car_lm2 = LinearRegression()\n",
        "car_lm2.fit(train_X2, train_y2)\n",
        "\n",
        "# print coefficients\n",
        "print('intercept ', car_lm2.intercept_)\n",
        "print(pd.DataFrame({'Predictor': X2.columns, 'coefficient': car_lm2.coef_}))\n",
        "\n",
        "# print performance measures\n",
        "regressionSummary(train_y2, car_lm2.predict(train_X2))\n"
      ],
      "metadata": {
        "id": "qG4gBDWg155I",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bdfc4582-5221-4ef8-9a35-261ce0e0a687"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "intercept  18880.234542400412\n",
            "          Predictor  coefficient\n",
            "0         Age_08_04  -145.928909\n",
            "1                KM    -0.021564\n",
            "2             Doors   277.015696\n",
            "3  Fuel_Type_Diesel  1085.952989\n",
            "4  Fuel_Type_Petrol   286.565941\n",
            "\n",
            "Regression statistics\n",
            "\n",
            "                      Mean Error (ME) : -0.0000\n",
            "       Root Mean Squared Error (RMSE) : 1664.0528\n",
            "            Mean Absolute Error (MAE) : 1176.6056\n",
            "          Mean Percentage Error (MPE) : -1.4717\n",
            "Mean Absolute Percentage Error (MAPE) : 11.0746\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Calculate the predicted price of a car with the following known characteristics:\n",
        "\n",
        "*   20 months old\n",
        "*   45000 kilometers\n",
        "*   Petrol fuel type\n",
        "*   2 doors\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "rHCkWW6c3UUf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(18880.23 + (-145.93 * 20) + (-0.02 * 45000) + (277 * 2) + (1085.95 * 0) + (286.57 * 1))"
      ],
      "metadata": {
        "id": "awvW0iN13v3K",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "114aa051-8cc6-4311-c5f5-d80b26be68c6"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "15902.199999999999\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#OR create a dataframe and plug in values\n",
        "data = dict(Age_08_04=20, KM=45000, Doors=2, Fuel_Type_Diesel=0, Fuel_Type_Petrol=1)\n",
        "df = pd.DataFrame(data, index=[0])\n",
        "df"
      ],
      "metadata": {
        "id": "5cI-uCtj6ifz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "outputId": "7ca38aed-1e5b-4f12-cc3e-1ebb270df06c"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Age_08_04     KM  Doors  Fuel_Type_Diesel  Fuel_Type_Petrol\n",
              "0         20  45000      2                 0                 1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e07e0db5-1aea-4558-b926-1df49c71e66c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age_08_04</th>\n",
              "      <th>KM</th>\n",
              "      <th>Doors</th>\n",
              "      <th>Fuel_Type_Diesel</th>\n",
              "      <th>Fuel_Type_Petrol</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>20</td>\n",
              "      <td>45000</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e07e0db5-1aea-4558-b926-1df49c71e66c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e07e0db5-1aea-4558-b926-1df49c71e66c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e07e0db5-1aea-4558-b926-1df49c71e66c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "car_lm2.predict(df)\n",
        "#there is a slight difference with the print equation above"
      ],
      "metadata": {
        "id": "Rq-Dy8f84she",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e9307dc1-0510-47d7-a165-a9068cb6759f"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([15831.8624918])"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.7"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}